Node* minValue(Node* root){
   Node* temp = root;
    while(temp->left!=NULL){
        temp = temp->left;
    }
    return temp;
}
Node* solve(Node* root,int val){
    if(root==NULL)return NULL;
    if(root->data==val){
        // 0 child
        if(root->left==NULL && root->right==NULL){
            delete root;
            return NULL;
        }
        // 1 child left part
        if(root->left!=NULL && root->right==NULL){
            Node* temp = root->left;
            delete root;
            return temp;
             
        }
        // 1 child right part
        if(root->left==NULL && root->right!=NULL){
            Node* temp = root->right;
            delete root;
            return temp;    
        }
        // 2 child 
        if(root->left!=NULL && root->right!=NULL){
            int mini = minValue(root->right)->data;
            root->data = mini;
            root->right = solve(root->right,mini);
            return root;
        }
    }
    else if (root->data>val){
        root->left = solve(root->left,val);
        return root;
    }
    else if (root->data<val){
        root->right = solve(root->right,val);
        return root;
    }
}
Node *deleteNode(Node *root, int X) {
    root = solve(root,X);
    return root;
}
