class Solution {
    private:
    Node* createParentMapping(Node* root, int target,map<Node*,Node*> &nodeToParent){
        Node* res = NULL;
        
        queue<Node*> q;
        q.push(root);
        
        nodeToParent[root]=NULL;
        
        while(!q.empty()){
            Node* top = q.front();
            q.pop();
            
            if(top->data == target){
                res = top;
            }
            
            if(top->left){
                nodeToParent[top->left] = top;
                q.push(top->left);
            }
            if(top->right){
                nodeToParent[top->right] = top;
                q.push(top->right);
            }
        }
        return res;
    }
    int burnTree(Node* root, map<Node*,Node*> &nodeToParent){
        
        map <Node*,bool> visited;
        queue<Node*> q;
        
        
        q.push(root);
        visited[root] = true;
        
        int ans = 0;
        
        while(!q.empty()){
            bool flag = 0;
            int size = q.size();
            for(int i=0;i<size;i++){
                // processing neighbouring node
                Node* front = q.front();
                q.pop();
                
                if(front->left && !visited[front->left]){
                    q.push(front->left);
                    visited[front->left] = 1;
                    flag=1;
                }
                if(front->right && !visited[front->right]){
                    q.push(front->right);
                    visited[front->right] = 1;
                    flag=1;
                }
                if(nodeToParent[front] && !visited[nodeToParent[front]]){
                    q.push(nodeToParent[front]);
                    visited[nodeToParent[front]] = 1;
                    flag=1;
                }
            }
            if(flag == 1)
            ans++;
        }
        return ans;
    }
  public:
    int minTime(Node* root, int target) 
    {
        // Algo
        // Step 1 : create nodeToparent mapping
        // Step 2 : find target node
        // Step 3 : burn the tree in min time......
        
        map<Node*,Node*> nodeToParent;
        Node* targetNode = createParentMapping(root,target,nodeToParent);
        
        int ans = burnTree(targetNode,nodeToParent);
        
        return ans;
    }
};
