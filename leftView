void printLeftView(BinaryTreeNode<int> *root)
{
    vector<int> ans;
    if(root==NULL)return;
    
    map <int,int> topview;
    queue <pair<BinaryTreeNode<int>*,int>> q;
    q.push(make_pair(root,0));
    
    while(!q.empty()){
        pair<BinaryTreeNode<int>*,int> temp = q.front();
        q.pop();
        
        BinaryTreeNode<int> *front = temp.first;
        int hd = temp.second;
        
        if(topview.find(hd)==topview.end()){
        topview[hd] = (front->data);
        }
        if(front->left)
        q.push(make_pair(front->left,hd+1));
        if(front->right)
        q.push(make_pair(front->right,hd+1));
    }
    for(auto i:topview){ 
        cout<<i.second<<" ";
    }
    return;
}
